{"version":3,"sources":["../../../src/highlightjs/languages/hy.js"],"names":["hy","hljs","SYMBOLSTART","SYMBOL_RE","NUMBER","className","begin","relevance","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","DEFAULT_CONTAINS","contains","keywords","lexemes","starts","name","aliases","module","exports"],"mappings":"AAQA,QAASA,CAAAA,EAAT,CAAYC,CAAZ,CAAkB,IAmCZC,CAAAA,CAAW,CAAG,uBAnCF,CAoCZC,CAAS,CAAG,IAAMD,CAAN,CAAoB,IAApB,CAA2BA,CAA3B,CAAyC,UApCzC,CAgDZE,CAAM,CAAG,CACXC,SAAS,CAAE,QADA,CACUC,KAAK,CAZL,qBAWV,CAEXC,SAAS,CAAE,CAFA,CAhDG,CAoDZC,CAAM,CAAGP,CAAI,CAACQ,OAAL,CAAaR,CAAI,CAACS,iBAAlB,CAAqC,CAACC,OAAO,CAAE,IAAV,CAArC,CApDG,CAqDZC,CAAO,CAAGX,CAAI,CAACW,OAAL,CACZ,GADY,CAEZ,GAFY,CAGZ,CACEL,SAAS,CAAE,CADb,CAHY,CArDE,CA4DZM,CAAO,CAAG,CACZR,SAAS,CAAE,SADC,CAEZC,KAAK,CAAE,iCAFK,CA5DE,CAgEZQ,CAAU,CAAG,CACfR,KAAK,CAAE,UADQ,CACIS,GAAG,CAAE,UADT,CAhED,CAmEZC,CAAI,CAAG,CACTX,SAAS,CAAE,SADF,CAETC,KAAK,CAAE,MAAQH,CAFN,CAnEK,CAuEZc,CAAQ,CAAGhB,CAAI,CAACW,OAAL,CAAa,QAAb,CAAuB,KAAvB,CAvEC,CAwEZM,CAAG,CAAG,CACRb,SAAS,CAAE,QADH,CAERC,KAAK,CAAE,WAAaH,CAFZ,CAxEM,CA4EZgB,CAAI,CAAG,CACTb,KAAK,CAAE,KADE,CACKS,GAAG,CAAE,KADV,CA5EK,CA+EZK,CAAI,CAAG,CACTC,cAAc,GADL,CAETd,SAAS,CAAE,CAFF,CA/EK,CAyFZe,CAAgB,CAAG,CAACH,CAAD,CAAOX,CAAP,CAAeQ,CAAf,CAAqBC,CAArB,CAA+BL,CAA/B,CAAwCM,CAAxC,CAA6CJ,CAA7C,CAAyDV,CAAzD,CAAiES,CAAjE,CA7CV,CACXP,KAAK,CAAEH,CADI,CAEXI,SAAS,CAAE,CAFA,CA6CU,CAzFP,CA2FhBY,CAAI,CAACI,QAAL,CAAgB,CAACtB,CAAI,CAACW,OAAL,CAAa,SAAb,CAAwB,EAAxB,CAAD,CARL,CACTY,QAAQ,CAnFK,CACb,ilEADa,CAkFJ,CAETC,OAAO,CAAEtB,CAFA,CAGTE,SAAS,CAAE,MAHF,CAGUC,KAAK,CAAEH,CAHjB,CAITuB,MAAM,CAAEN,CAJC,CAQK,CAAoCA,CAApC,CAAhB,CACAA,CAAI,CAACG,QAAL,CAAgBD,CAAhB,CACAR,CAAU,CAACS,QAAX,CAAsBD,CAAtB,CAEA,MAAO,CACLK,IAAI,CAAE,IADD,CAELC,OAAO,CAAE,CAAC,QAAD,CAFJ,CAGLjB,OAAO,CAAE,IAHJ,CAILY,QAAQ,CAAE,CA5DE,CACZlB,SAAS,CAAE,MADC,CAEZC,KAAK,CAAE,KAFK,CAEES,GAAG,CAAE,GAFP,CA4DF,CAAUI,CAAV,CAAgBX,CAAhB,CAAwBQ,CAAxB,CAA8BC,CAA9B,CAAwCL,CAAxC,CAAiDM,CAAjD,CAAsDJ,CAAtD,CAAkEV,CAAlE,CAA0ES,CAA1E,CAJL,CAMR,CAEDgB,MAAM,CAACC,OAAP,CAAiB9B,EAAjB","sourcesContent":["/*\nLanguage: Hy\nDescription: Hy is a wonderful dialect of Lisp thatâ€™s embedded in Python.\nAuthor: Sergey Sobko <s.sobko@profitware.ru>\nWebsite: http://docs.hylang.org/en/stable/\nCategory: lisp\n*/\n\nfunction hy(hljs) {\n  var keywords = {\n    'builtin-name':\n      // keywords\n      '!= % %= & &= * ** **= *= *map ' +\n      '+ += , --build-class-- --import-- -= . / // //= ' +\n      '/= < << <<= <= = > >= >> >>= ' +\n      '@ @= ^ ^= abs accumulate all and any ap-compose ' +\n      'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +\n      'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +\n      'callable calling-module-name car case cdr chain chr coll? combinations compile ' +\n      'compress cond cons cons? continue count curry cut cycle dec ' +\n      'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +\n      'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +\n      'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +\n      'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +\n      'flatten float? fn fnc fnr for for* format fraction genexpr ' +\n      'gensym get getattr global globals group-by hasattr hash hex id ' +\n      'identity if if* if-not if-python2 import in inc input instance? ' +\n      'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +\n      'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +\n      'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +\n      'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +\n      'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +\n      'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +\n      'none? nonlocal not not-in not? nth numeric? oct odd? open ' +\n      'or ord partition permutations pos? post-route postwalk pow prewalk print ' +\n      'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +\n      'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +\n      'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +\n      'string? sum switch symbol? take take-nth take-while tee try unless ' +\n      'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +\n      'xi xor yield yield-from zero? zip zip-longest | |= ~'\n   };\n\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!', end: '$'\n  };\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    lexemes: SYMBOL_RE,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n\n  return {\n    name: 'Hy',\n    aliases: ['hylang'],\n    illegal: /\\S/,\n    contains: [SHEBANG, LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  }\n}\n\nmodule.exports = hy;\n"],"file":"hy.min.js"}