{"version":3,"sources":["../../../src/highlightjs/languages/less.js"],"names":["less","hljs","INTERP_IDENT_RE","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","end","excludeEnd","contains","returnBegin","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","SELECTOR_MODE","variants","returnEnd","illegal","case_insensitive","module","exports"],"mappings":"AAQA,QAASA,CAAAA,IAAT,CAAcC,CAAd,CAAoB,IAEdC,CAAAA,CAAe,uBAFD,CAMdC,CAAK,CAAG,EANM,CAMFC,CAAK,CAAG,EANN,CAQdC,CAAW,CAAG,SAASC,CAAT,CAAY,CAAE,MAAO,CAErCC,SAAS,CAAE,QAF0B,CAEhBC,KAAK,CAAE,KAAOF,CAAP,CAAW,KAAX,CAAmBA,CAFV,CAGpC,CAXe,CAadG,CAAU,CAAG,SAASC,CAAT,CAAeF,CAAf,CAAsBG,CAAtB,CAAiC,CAAE,MAAO,CACzDJ,SAAS,CAAEG,CAD8C,CACxCF,KAAK,CAAEA,CADiC,CAC1BG,SAAS,CAAEA,CADe,CAExD,CAfe,CAuBlBP,CAAK,CAACQ,IAAN,CACEX,CAAI,CAACY,mBADP,CAEEZ,CAAI,CAACa,oBAFP,CAGET,CAAW,CAAC,GAAD,CAHb,CAIEA,CAAW,CAAC,IAAD,CAJb,CAKEJ,CAAI,CAACc,eALP,CAME,CACEP,KAAK,CAAE,mBADT,CAEEQ,MAAM,CAAE,CAACT,SAAS,CAAE,QAAZ,CAAsBU,GAAG,CAAE,UAA3B,CAAuCC,UAAU,GAAjD,CAFV,CANF,CAUET,CAAU,CAAC,QAAD,CAAW,kBAAX,CAVZ,CANkB,CAEhBD,KAAK,CAAE,KAFS,CAEFS,GAAG,CAAE,KAFH,CAEUE,QAAQ,CAAEf,CAFpB,CAE2BO,SAAS,CAAE,CAFtC,CAMlB,CAYEF,CAAU,CAAC,UAAD,cAA+B,EAA/B,CAZZ,CAaEA,CAAU,CAAC,UAAD,cAbZ,CAcEA,CAAU,CAAC,UAAD,CAAa,YAAb,CAdZ,CAeE,CACEF,SAAS,CAAE,WADb,CAC0BC,KAAK,eAD/B,CACqDS,GAAG,CAAE,GAD1D,CAC+DG,WAAW,GAD1E,CACkFF,UAAU,GAD5F,CAfF,CAkBE,CACEX,SAAS,CAAE,MADb,CAEEC,KAAK,CAAE,YAFT,CAlBF,EAvBkB,GA+Cda,CAAAA,CAAmB,CAAGjB,CAAK,CAACkB,MAAN,CAAa,CACrCd,KAAK,CAAE,GAD8B,CACzBS,GAAG,CAAE,GADoB,CACfE,QAAQ,CAAEhB,CADK,CAAb,CA/CR,CAmDdoB,CAAgB,CAAG,CACrBC,aAAa,CAAE,MADM,CACEC,cAAc,GADhB,CAErBN,QAAQ,CAAE,CAAC,CAACK,aAAa,CAAE,SAAhB,CAAD,EAA6BF,MAA7B,CAAoClB,CAApC,CAFW,CAnDL,CA8FdsB,CAAa,CAAG,CAIlBC,QAAQ,CAAE,CAAC,CACTnB,KAAK,CAAE,cADE,CACcS,GAAG,CAAE,OADnB,CAAD,CAEL,CACHT,KAAK,CAAEN,CADJ,CACqBe,GAAG,CAAE,GAD1B,CAFK,CAJQ,CASlBG,WAAW,GATO,CAUlBQ,SAAS,GAVS,CAWlBC,OAAO,CAAE,UAXS,CAYlBlB,SAAS,CAAE,CAZO,CAalBQ,QAAQ,CAAE,CACRlB,CAAI,CAACY,mBADG,CAERZ,CAAI,CAACa,oBAFG,CAGRS,CAHQ,CAIRd,CAAU,CAAC,SAAD,CAAa,QAAb,CAJF,CAKRA,CAAU,CAAC,UAAD,cALF,CAMRA,CAAU,CAAC,cAAD,CAAkBP,CAAe,CAAG,IAApC,CAA0C,CAA1C,CANF,CAORO,CAAU,CAAC,aAAD,CAAgB,IAAMP,CAAtB,CAPF,CAQRO,CAAU,CAAC,gBAAD,CAAmB,MAAQP,CAA3B,CAA4C,CAA5C,CARF,CASRO,CAAU,CAAC,cAAD,CAAkB,GAAlB,CAAuB,CAAvB,CATF,CAUR,CAACF,SAAS,CAAE,eAAZ,CAA6BC,KAAK,CAAE,KAApC,CAA2CS,GAAG,CAAE,KAAhD,CAVQ,CAWR,CAACV,SAAS,CAAE,iBAAZ,CAA+BC,KAAK,CAAE,gCAAtC,CAXQ,CAYR,CAACA,KAAK,CAAE,KAAR,CAAeS,GAAG,CAAE,KAApB,CAA2BE,QAAQ,CAAEE,CAArC,CAZQ,CAaR,CAACb,KAAK,CAAE,YAAR,CAbQ,CAbQ,CA9FF,CA4HlBL,CAAK,CAACS,IAAN,CACEX,CAAI,CAACY,mBADP,CAEEZ,CAAI,CAACa,oBAFP,CAlDmB,CACjBP,SAAS,CAAE,SADM,CAEjBC,KAAK,CAAE,0GAFU,CAGjBQ,MAAM,CAAE,CAACC,GAAG,CAAE,OAAN,CAAeW,SAAS,GAAxB,CAAgCT,QAAQ,CAAEf,CAA1C,CAAiDO,SAAS,CAAE,CAA5D,CAHS,CAkDnB,CA3CoB,CAClBJ,SAAS,CAAE,UADO,CAElBoB,QAAQ,CAAE,CAKR,CAACnB,KAAK,gBAAN,CAAkCG,SAAS,CAAE,EAA7C,CALQ,CAMR,CAACH,KAAK,WAAN,CANQ,CAFQ,CAUlBQ,MAAM,CAAE,CAACC,GAAG,CAAE,MAAN,CAAcW,SAAS,GAAvB,CAA+BT,QAAQ,CAAEE,CAAzC,CAVU,CA2CpB,CAlEgB,CACdb,KAAK,CAAEN,CAAe,CAAG,OADX,CACoBkB,WAAW,GAD/B,CACuCH,GAAG,CAAE,MAD5C,CAEdN,SAAS,CAAE,CAFG,CAGdQ,QAAQ,CAAE,CACR,CACEZ,SAAS,CAAE,WADb,CAEEC,KAAK,CAAEN,CAFT,CAE0Be,GAAG,CAAE,GAF/B,CAEoCC,UAAU,GAF9C,CAGEF,MAAM,CAAE,CACNS,cAAc,GADR,CACgBI,OAAO,CAAE,OADzB,CAENlB,SAAS,CAAE,CAFL,CAGNQ,QAAQ,CAAEf,CAHJ,CAHV,CADQ,CAHI,CAkEhB,CAMEsB,CANF,EASA,MAAO,CACLhB,IAAI,CAAE,MADD,CAELoB,gBAAgB,GAFX,CAGLD,OAAO,CAAE,aAHJ,CAILV,QAAQ,CAAEhB,CAJL,CAMR,CAED4B,MAAM,CAACC,OAAP,CAAiBhC,IAAjB","sourcesContent":["/*\nLanguage: Less\nDescription: It's CSS, with just a little more.\nAuthor:   Max Mikhailov <seven.phases.max@gmail.com>\nWebsite: http://lesscss.org\nCategory: common, css\n*/\n\nfunction less(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    name: 'Less',\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n}\n\nmodule.exports = less;\n"],"file":"less.min.js"}