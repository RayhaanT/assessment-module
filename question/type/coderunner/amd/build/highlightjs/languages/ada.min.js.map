{"version":3,"sources":["../../../src/highlightjs/languages/ada.js"],"names":["ada","hljs","EXPONENT_RE","BASED_INTEGER_RE","ID_REGEX","BAD_CHARS","COMMENTS","COMMENT","VAR_DECLS","begin","end","illegal","contains","beginKeywords","endsParent","className","relevance","name","case_insensitive","keywords","keyword","literal","excludeBegin","excludeEnd","returnBegin","module","exports"],"mappings":"AAmBA,QAASA,CAAAA,GAAT,CAAaC,CAAb,CAAmB,IAMXC,CAAAA,CAAW,uBANA,CAUXC,CAAgB,CAAG,MAVR,CAgBXC,CAAQ,CAAG,2BAhBA,CAmBXC,CAAS,CAAG,WAnBD,CAsBXC,CAAQ,CAAGL,CAAI,CAACM,OAAL,CAAa,IAAb,CAAmB,GAAnB,CAtBA,CA2BXC,CAAS,CAAG,CAIZC,KAAK,CAAE,WAJK,CAIQC,GAAG,CAAE,qBAJb,CAOZC,OAAO,CAAEN,CAPG,CAQZO,QAAQ,CAAE,CACN,CAGIC,aAAa,CAAE,yBAHnB,CAIIC,UAAU,GAJd,CADM,CAON,CAEIC,SAAS,CAAE,SAFf,CAGIF,aAAa,CAAE,sEAHnB,CAPM,CAYN,CACIE,SAAS,CAAE,MADf,CAEIN,KAAK,CAAEL,CAFX,CAGIU,UAAU,GAHd,CAIIE,SAAS,CAAE,CAJf,CAZM,CARE,CA3BD,CAwDf,MAAO,CACHC,IAAI,CAAE,KADH,CAEHC,gBAAgB,GAFb,CAGHC,QAAQ,CAAE,CACNC,OAAO,4bADD,CASNC,OAAO,CACH,YAVE,CAHP,CAeHT,QAAQ,CAAE,CACNN,CADM,CAGN,CACIS,SAAS,CAAE,QADf,CAEIN,KAAK,CAAE,GAFX,CAEgBC,GAAG,CAAE,GAFrB,CAGIE,QAAQ,CAAE,CAAC,CAACH,KAAK,CAAE,IAAR,CAAcO,SAAS,CAAE,CAAzB,CAAD,CAHd,CAHM,CASN,CAEID,SAAS,CAAE,QAFf,CAGIN,KAAK,CAAE,KAHX,CATM,CAcN,CAEIM,SAAS,CAAE,QAFf,CAGIN,KAAK,CA3ED,QAFO,eAAmBN,CAAnB,CAAsC,MAAtC,CAA+CA,CAA/C,QAAqFD,CAArF,CAAmG,IAE1G,EAA4B,GAA5B,EANS,gCAAgDA,CAAhD,CAA8D,IAMvE,EAAuD,GAwE/D,CAIIc,SAAS,CAAE,CAJf,CAdM,CAoBN,CAEID,SAAS,CAAE,QAFf,CAGIN,KAAK,CAAE,IAAML,CAHjB,CApBM,CAyBN,CAEIW,SAAS,CAAE,OAFf,CAGIN,KAAK,CAAE,6DAHX,CAG0EC,GAAG,CAAE,QAH/E,CAIIS,QAAQ,CAAE,cAJd,CAKIG,YAAY,GALhB,CAMIC,UAAU,GANd,CAOIZ,OAAO,CAAEN,CAPb,CAzBM,CAkCN,CAGII,KAAK,CAAE,wDAHX,CAGqEC,GAAG,CAAE,qCAH1E,CAIIS,QAAQ,CAAE,sDAJd,CAOIK,WAAW,GAPf,CAQIZ,QAAQ,CACR,CACIN,CADJ,CAEI,CAEIS,SAAS,CAAE,OAFf,CAGIN,KAAK,CAAE,2CAHX,CAIIC,GAAG,CAAE,cAJT,CAKIY,YAAY,GALhB,CAMIC,UAAU,GANd,CAOIZ,OAAO,CAAEN,CAPb,CAFJ,CAaIG,CAbJ,CAcI,CAEIO,SAAS,CAAE,MAFf,CAGIN,KAAK,CAAE,eAHX,CAG4BC,GAAG,CAAE,YAHjC,CAIIS,QAAQ,CAAE,QAJd,CAKIG,YAAY,GALhB,CAMIC,UAAU,GANd,CAQIT,UAAU,GARd,CASIH,OAAO,CAAEN,CATb,CAdJ,CATJ,CAlCM,CAuEN,CAGIU,SAAS,CAAE,MAHf,CAIIN,KAAK,CAAE,mBAJX,CAIgCC,GAAG,CAAE,MAJrC,CAKIS,QAAQ,CAAE,MALd,CAMIG,YAAY,GANhB,CAOIX,OAAO,CAAEN,CAPb,CAvEM,CAkFNG,CAlFM,CAfP,CA0GV,CAEDiB,MAAM,CAACC,OAAP,CAAiB1B,GAAjB","sourcesContent":["/*\nLanguage: Ada\nAuthor: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>\nDescription: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.\n             It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).\n             The first version appeared in the 80s, but it's still actively developed today with\n             the newest standard being Ada2012.\n*/\n\n// We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction ada(hljs) {\n    // Regular expression for Ada numeric literals.\n    // stolen form the VHDL highlighter\n\n    // Decimal literal:\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n    // Based literal:\n    var BASED_INTEGER_RE = '\\\\w+';\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n    // Identifier regex\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n    // bad chars, only allowed in literals\n    var BAD_CHARS = '[]{}%#\\'\\\"';\n\n    // Ada doesn't have block comments, only line comments\n    var COMMENTS = hljs.COMMENT('--', '$');\n\n    // variable declarations of the form\n    // Foo : Bar := Baz;\n    // where only Bar will be highlighted\n    var VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n            {\n                // workaround to avoid highlighting\n                // named loops and declare blocks\n                beginKeywords: 'loop for declare others',\n                endsParent: true,\n            },\n            {\n                // properly highlight all modifiers\n                className: 'keyword',\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\n            },\n            {\n                className: 'type',\n                begin: ID_REGEX,\n                endsParent: true,\n                relevance: 0,\n            }\n        ]\n    };\n\n    return {\n        name: 'Ada',\n        case_insensitive: true,\n        keywords: {\n            keyword:\n                'abort else new return abs elsif not reverse abstract end ' +\n                'accept entry select access exception of separate aliased exit or some ' +\n                'all others subtype and for out synchronized array function overriding ' +\n                'at tagged generic package task begin goto pragma terminate ' +\n                'body private then if procedure type case in protected constant interface ' +\n                'is raise use declare range delay limited record when delta loop rem while ' +\n                'digits renames with do mod requeue xor',\n            literal:\n                'True False',\n        },\n        contains: [\n            COMMENTS,\n            // strings \"foobar\"\n            {\n                className: 'string',\n                begin: /\"/, end: /\"/,\n                contains: [{begin: /\"\"/, relevance: 0}]\n            },\n            // characters ''\n            {\n                // character literals always contain one char\n                className: 'string',\n                begin: /'.'/\n            },\n            {\n                // number literals\n                className: 'number',\n                begin: NUMBER_RE,\n                relevance: 0\n            },\n            {\n                // Attributes\n                className: 'symbol',\n                begin: \"'\" + ID_REGEX,\n            },\n            {\n                // package definition, maybe inside generic\n                className: 'title',\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\n                keywords: 'package body',\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n            },\n            {\n                // function/procedure declaration/definition\n                // maybe inside generic\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n                keywords: 'overriding function procedure with is renames return',\n                // we need to re-match the 'function' keyword, so that\n                // the title mode below matches only exactly once\n                returnBegin: true,\n                contains:\n                [\n                    COMMENTS,\n                    {\n                        // name of the function/procedure\n                        className: 'title',\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                        end: '(\\\\(|\\\\s+|$)',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        illegal: BAD_CHARS\n                    },\n                    // 'self'\n                    // // parameter types\n                    VAR_DECLS,\n                    {\n                        // return type\n                        className: 'type',\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\n                        keywords: 'return',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        // we are done with functions\n                        endsParent: true,\n                        illegal: BAD_CHARS\n\n                    },\n                ]\n            },\n            {\n                // new type declarations\n                // maybe inside generic\n                className: 'type',\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\n                keywords: 'type',\n                excludeBegin: true,\n                illegal: BAD_CHARS\n            },\n\n            // see comment above the definition\n            VAR_DECLS,\n\n            // no markup\n            // relevance boosters for small snippets\n            // {begin: '\\\\s*=>\\\\s*'},\n            // {begin: '\\\\s*:=\\\\s*'},\n            // {begin: '\\\\s+:=\\\\s+'},\n        ]\n    };\n}\n\nmodule.exports = ada;\n"],"file":"ada.min.js"}