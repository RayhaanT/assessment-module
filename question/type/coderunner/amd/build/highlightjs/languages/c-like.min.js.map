{"version":3,"sources":["../../../src/highlightjs/languages/c-like.js"],"names":["cLike","hljs","optional","s","NAMESPACE_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","concat","FUNCTION_DECLARATION","returnBegin","excludeEnd","aliases","disableAutodetect","exports","preprocessor","strings","module"],"mappings":"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","sourcesContent":["/*\nLanguage: C-like foundation grammar for C/C++ grammars\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\nCategory: common, system\n*/\n\n/* In the future the intention is to split out the C/C++ grammars distinctly\nsince they are separate languages.  They will likely share a common foundation\nthough, and this file sets the groundwork for that - so that we get the breaking\nchange in v10 and don't have to change the requirements again later.\n\nSee: https://github.com/highlightjs/highlight.js/issues/2146\n*/\n\nfunction cLike(hljs) {\n  function optional(s) {\n    return '(?:' + s + ')?';\n  }\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  var TEMPLATE_ARGUMENT_RE = '<.*?>';\n  var FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +'[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\", end: '\\'',\n        illegal: '.'\n      },\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {begin: /=/, end: /;/},\n      {begin: /\\(/, end: /\\)/},\n      {beginKeywords: 'new throw return else', end: /;/}\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  var FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true, end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>]/,\n    contains: [\n\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n      },\n      {\n        begin: FUNCTION_TITLE, returnBegin: true,\n        contains: [TITLE_MODE],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    // the base c-like language will NEVER be auto-detected, rather the\n    // derivitives: c, c++, arduino turn auto-detect back on for themselves\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = cLike;\n"],"file":"c-like.min.js"}