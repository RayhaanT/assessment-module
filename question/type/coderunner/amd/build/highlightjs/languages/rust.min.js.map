{"version":3,"sources":["../../../src/highlightjs/languages/rust.js"],"names":["rust","hljs","BUILTINS","name","aliases","keywords","keyword","literal","built_in","lexemes","IDENT_RE","illegal","contains","C_LINE_COMMENT_MODE","COMMENT","inherit","QUOTE_STRING_MODE","begin","className","variants","relevance","beginKeywords","end","excludeEnd","UNDERSCORE_TITLE_MODE","endsParent","module","exports"],"mappings":"AAQA,QAASA,CAAAA,IAAT,CAAcC,CAAd,CAAoB,IAOdC,CAAAA,CAAQ,upBAPM,CA2BlB,MAAO,CACLC,IAAI,CAAE,MADD,CAELC,OAAO,CAAE,CAAC,IAAD,CAFJ,CAGLC,QAAQ,CAAE,CACRC,OAAO,2RADC,CAGRC,OAAO,CACL,6BAJM,CAKRC,QAAQ,CACNN,CANM,CAHL,CAWLO,OAAO,CAAER,CAAI,CAACS,QAAL,CAAgB,IAXpB,CAYLC,OAAO,CAAE,IAZJ,CAaLC,QAAQ,CAAE,CACRX,CAAI,CAACY,mBADG,CAERZ,CAAI,CAACa,OAAL,CAAa,MAAb,CAAqB,MAArB,CAA6B,CAACF,QAAQ,CAAE,CAAC,MAAD,CAAX,CAA7B,CAFQ,CAGRX,CAAI,CAACc,OAAL,CAAad,CAAI,CAACe,iBAAlB,CAAqC,CAACC,KAAK,CAAE,KAAR,CAAeN,OAAO,CAAE,IAAxB,CAArC,CAHQ,CAIR,CACEO,SAAS,CAAE,QADb,CAEEC,QAAQ,CAAE,CACP,CAAEF,KAAK,CAAE,wBAAT,CADO,CAEP,CAAEA,KAAK,CAAE,iCAAT,CAFO,CAFZ,CAJQ,CAWR,CACEC,SAAS,CAAE,QADb,CAEED,KAAK,CAAE,yBAFT,CAXQ,CAeR,CACEC,SAAS,CAAE,QADb,CAEEC,QAAQ,CAAE,CACR,CAAEF,KAAK,qDAAP,CADQ,CAER,CAAEA,KAAK,sDAAP,CAFQ,CAGR,CAAEA,KAAK,4DAAP,CAHQ,CAIR,CAAEA,KAAK,uFAAP,CAJQ,CAFZ,CAUEG,SAAS,CAAE,CAVb,CAfQ,CA2BR,CACEF,SAAS,CAAE,UADb,CAEEG,aAAa,CAAE,IAFjB,CAEuBC,GAAG,CAAE,SAF5B,CAEuCC,UAAU,GAFjD,CAGEX,QAAQ,CAAE,CAACX,CAAI,CAACuB,qBAAN,CAHZ,CA3BQ,CAgCR,CACEN,SAAS,CAAE,MADb,CAEED,KAAK,CAAE,UAFT,CAEqBK,GAAG,CAAE,KAF1B,CAGEV,QAAQ,CAAE,CACR,CACEM,SAAS,CAAE,aADb,CAEED,KAAK,CAAE,GAFT,CAEcK,GAAG,CAAE,GAFnB,CADQ,CAHZ,CAhCQ,CA0CR,CACEJ,SAAS,CAAE,OADb,CAEEG,aAAa,CAAE,MAFjB,CAEyBC,GAAG,CAAE,GAF9B,CAGEV,QAAQ,CAAE,CACRX,CAAI,CAACc,OAAL,CAAad,CAAI,CAACuB,qBAAlB,CAAyC,CAACC,UAAU,GAAX,CAAzC,CADQ,CAHZ,CAMEd,OAAO,CAAE,KANX,CA1CQ,CAkDR,CACEO,SAAS,CAAE,OADb,CAEEG,aAAa,CAAE,yBAFjB,CAE4CC,GAAG,CAAE,GAFjD,CAGEV,QAAQ,CAAE,CACRX,CAAI,CAACc,OAAL,CAAad,CAAI,CAACuB,qBAAlB,CAAyC,CAACC,UAAU,GAAX,CAAzC,CADQ,CAHZ,CAMEd,OAAO,CAAE,UANX,CAlDQ,CA0DR,CACEM,KAAK,CAAEhB,CAAI,CAACS,QAAL,CAAgB,IADzB,CAEEL,QAAQ,CAAE,CAACG,QAAQ,CAAEN,CAAX,CAFZ,CA1DQ,CA8DR,CACEe,KAAK,CAAE,IADT,CA9DQ,CAbL,CAgFR,CAEDS,MAAM,CAACC,OAAP,CAAiB3B,IAAjB","sourcesContent":["/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/\n\nfunction rust(hljs) {\n  var NUM_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  var KEYWORDS =\n    'abstract as async await become box break const continue crate do dyn ' +\n    'else enum extern false final fn for if impl in let loop macro match mod ' +\n    'move mut override priv pub ref return self Self static struct super ' +\n    'trait true try type typeof unsafe unsized use virtual where while yield';\n  var BUILTINS =\n    // functions\n    'drop ' +\n    // types\n    'i8 i16 i32 i64 i128 isize ' +\n    'u8 u16 u32 u64 u128 usize ' +\n    'f32 f64 ' +\n    'str char bool ' +\n    'Box Option Result String Vec ' +\n    // traits\n    'Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug ' +\n    'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +\n    'Extend IntoIterator DoubleEndedIterator ExactSizeIterator ' +\n    'SliceConcatExt ToString ' +\n    // macros\n    'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +\n    'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +\n    'include_bin! include_str! line! local_data_key! module_path! ' +\n    'option_env! print! println! select! stringify! try! unimplemented! ' +\n    'unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!';\n  return {\n    name: 'Rust',\n    aliases: ['rs'],\n    keywords: {\n      keyword:\n        KEYWORDS,\n      literal:\n        'true false Some None Ok Err',\n      built_in:\n        BUILTINS\n    },\n    lexemes: hljs.IDENT_RE + '!?',\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*', '\\\\*/', {contains: ['self']}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {begin: /b?\"/, illegal: null}),\n      {\n        className: 'string',\n        variants: [\n           { begin: /r(#*)\"(.|\\n)*?\"\\1(?!#)/ },\n           { begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/ }\n        ]\n      },\n      {\n        className: 'symbol',\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n      },\n      {\n        className: 'number',\n        variants: [\n          { begin: '\\\\b0b([01_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b0o([0-7_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +\n                   NUM_SUFFIX\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'fn', end: '(\\\\(|<)', excludeEnd: true,\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      {\n        className: 'meta',\n        begin: '#\\\\!?\\\\[', end: '\\\\]',\n        contains: [\n          {\n            className: 'meta-string',\n            begin: /\"/, end: /\"/\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'type', end: ';',\n        contains: [\n          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})\n        ],\n        illegal: '\\\\S'\n      },\n      {\n        className: 'class',\n        beginKeywords: 'trait enum struct union', end: '{',\n        contains: [\n          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})\n        ],\n        illegal: '[\\\\w\\\\d]'\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: {built_in: BUILTINS}\n      },\n      {\n        begin: '->'\n      }\n    ]\n  };\n}\n\nmodule.exports = rust;\n"],"file":"rust.min.js"}