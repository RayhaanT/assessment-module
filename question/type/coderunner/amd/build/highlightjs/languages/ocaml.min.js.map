{"version":3,"sources":["../../../src/highlightjs/languages/ocaml.js"],"names":["ocaml","hljs","name","aliases","keywords","keyword","built_in","literal","illegal","lexemes","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE","module","exports"],"mappings":"AASA,QAASA,CAAAA,KAAT,CAAeC,CAAf,CAAqB,CAEnB,MAAO,CACLC,IAAI,CAAE,OADD,CAELC,OAAO,CAAE,CAAC,IAAD,CAFJ,CAGLC,QAAQ,CAAE,CACRC,OAAO,sVADC,CASRC,QAAQ,qHATA,CAcRC,OAAO,CACL,YAfM,CAHL,CAoBLC,OAAO,CAAE,SApBJ,CAqBLC,OAAO,CAAE,cArBJ,CAsBLC,QAAQ,CAAE,CACR,CACEC,SAAS,CAAE,SADb,CAEEC,KAAK,CAAE,wBAFT,CAGEC,SAAS,CAAE,CAHb,CADQ,CAMRZ,CAAI,CAACa,OAAL,CACE,QADF,CAEE,QAFF,CAGE,CACEJ,QAAQ,CAAE,CAAC,MAAD,CADZ,CAHF,CANQ,CAaR,CACEC,SAAS,CAAE,QADb,CAEEC,KAAK,CAAE,wBAFT,CAbQ,CAkBR,CACED,SAAS,CAAE,MADb,CAEEC,KAAK,CAAE,eAFT,CAlBQ,CAsBR,CACED,SAAS,CAAE,MADb,CAEEC,KAAK,CAAE,iBAFT,CAGEC,SAAS,CAAE,CAHb,CAtBQ,CA2BR,CACED,KAAK,CAAE,oBADT,CACiCC,SAAS,CAAE,CAD5C,CA3BQ,CA8BRZ,CAAI,CAACc,OAAL,CAAad,CAAI,CAACe,gBAAlB,CAAoC,CAACL,SAAS,CAAE,QAAZ,CAAsBE,SAAS,CAAE,CAAjC,CAApC,CA9BQ,CA+BRZ,CAAI,CAACc,OAAL,CAAad,CAAI,CAACgB,iBAAlB,CAAqC,CAACT,OAAO,CAAE,IAAV,CAArC,CA/BQ,CAgCR,CACEG,SAAS,CAAE,QADb,CAEEC,KAAK,2HAFP,CAOEC,SAAS,CAAE,CAPb,CAhCQ,CAyCR,CACED,KAAK,CAAE,OADT,CAzCQ,CAtBL,CAoER,CAEDM,MAAM,CAACC,OAAP,CAAiBnB,KAAjB","sourcesContent":["/*\nLanguage: OCaml\nAuthor: Mehdi Dogguy <mehdi@dogguy.org>\nContributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>\nDescription: OCaml language definition.\nWebsite: https://ocaml.org\nCategory: functional\n*/\n\nfunction ocaml(hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    name: 'OCaml',\n    aliases: ['ml'],\n    keywords: {\n      keyword:\n        'and as assert asr begin class constraint do done downto else end ' +\n        'exception external for fun function functor if in include ' +\n        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +\n        'mod module mutable new object of open! open or private rec sig struct ' +\n        'then to try type val! val virtual when while with ' +\n        /* camlp4 */\n        'parser value',\n      built_in:\n        /* built-in types */\n        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\n        /* (some) types in Pervasives */\n        'in_channel out_channel ref',\n      literal:\n        'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    lexemes: '[a-z_]\\\\w*!?',\n    contains: [\n      {\n        className: 'literal',\n        begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: ['self']\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with '*/\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*', relevance: 0\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /[-=]>/ // relevance booster\n      }\n    ]\n  }\n}\n\nmodule.exports = ocaml;\n"],"file":"ocaml.min.js"}