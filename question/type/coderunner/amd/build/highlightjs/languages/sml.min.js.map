{"version":3,"sources":["../../../src/highlightjs/languages/sml.js"],"names":["sml","hljs","name","aliases","keywords","keyword","built_in","literal","illegal","lexemes","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE","module","exports"],"mappings":"AAQA,QAASA,CAAAA,GAAT,CAAaC,CAAb,CAAmB,CACjB,MAAO,CACLC,IAAI,CAAE,mBADD,CAELC,OAAO,CAAE,CAAC,IAAD,CAFJ,CAGLC,QAAQ,CAAE,CACRC,OAAO,iPADC,CAORC,QAAQ,CAEN,sFATM,CAURC,OAAO,CACL,6CAXM,CAHL,CAgBLC,OAAO,CAAE,SAhBJ,CAiBLC,OAAO,CAAE,cAjBJ,CAkBLC,QAAQ,CAAE,CACR,CACEC,SAAS,CAAE,SADb,CAEEC,KAAK,CAAE,kBAFT,CAGEC,SAAS,CAAE,CAHb,CADQ,CAMRZ,CAAI,CAACa,OAAL,CACE,QADF,CAEE,QAFF,CAGE,CACEJ,QAAQ,CAAE,CAAC,MAAD,CADZ,CAHF,CANQ,CAaR,CACEC,SAAS,CAAE,QADb,CAEEC,KAAK,CAAE,wBAFT,CAbQ,CAkBR,CACED,SAAS,CAAE,MADb,CAEEC,KAAK,CAAE,eAFT,CAlBQ,CAsBR,CACED,SAAS,CAAE,MADb,CAEEC,KAAK,CAAE,iBAFT,CAGEC,SAAS,CAAE,CAHb,CAtBQ,CA2BR,CACED,KAAK,CAAE,oBADT,CA3BQ,CA8BRX,CAAI,CAACc,OAAL,CAAad,CAAI,CAACe,gBAAlB,CAAoC,CAACL,SAAS,CAAE,QAAZ,CAAsBE,SAAS,CAAE,CAAjC,CAApC,CA9BQ,CA+BRZ,CAAI,CAACc,OAAL,CAAad,CAAI,CAACgB,iBAAlB,CAAqC,CAACT,OAAO,CAAE,IAAV,CAArC,CA/BQ,CAgCR,CACEG,SAAS,CAAE,QADb,CAEEC,KAAK,2HAFP,CAOEC,SAAS,CAAE,CAPb,CAhCQ,CAyCR,CACED,KAAK,CAAE,OADT,CAzCQ,CAlBL,CAgER,CAEDM,MAAM,CAACC,OAAP,CAAiBnB,GAAjB","sourcesContent":["/*\nLanguage: SML (Standard ML)\nAuthor: Edwin Dalorzo <edwin@dalorzo.org>\nDescription: SML language definition.\nWebsite: https://www.smlnj.org\nOrigin: ocaml.js\nCategory: functional\n*/\nfunction sml(hljs) {\n  return {\n    name: 'SML (Standard ML)',\n    aliases: ['ml'],\n    keywords: {\n      keyword:\n        /* according to Definition of Standard ML 97  */\n        'abstype and andalso as case datatype do else end eqtype ' +\n        'exception fn fun functor handle if in include infix infixr ' +\n        'let local nonfix of op open orelse raise rec sharing sig ' +\n        'signature struct structure then type val with withtype where while',\n      built_in:\n        /* built-in types according to basis library */\n        'array bool char exn int list option order real ref string substring vector unit word',\n      literal:\n        'true false NONE SOME LESS EQUAL GREATER nil'\n    },\n    illegal: /\\/\\/|>>/,\n    lexemes: '[a-z_]\\\\w*!?',\n    contains: [\n      {\n        className: 'literal',\n        begin: /\\[(\\|\\|)?\\]|\\(\\)/,\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: ['self']\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with '*/\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*'\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /[-=]>/ // relevance booster\n      }\n    ]\n  };\n}\n\nmodule.exports = sml;\n"],"file":"sml.min.js"}