{"version":3,"sources":["../src/add_random_form.js"],"names":["define","$","RandomQuestionFormPreview","SELECTORS","PREVIEW_CONTAINER","CATEGORY_FORM_ELEMENT","SUBCATEGORY_FORM_ELEMENT","TAG_IDS_FORM_ELEMENT","getCategorySelectValue","form","find","val","getCategoryId","valueString","values","split","isTopLevelCategorySelected","topCategories","selectedValue","indexOf","shouldIncludeSubcategories","is","getTagIds","map","value","parts","reloadQuestionPreview","contextId","previewContainer","reload","isInterestingElement","element","closest","length","addEventListeners","reloadTimerId","on","e","target","showLoadingIcon","clearTimeout","setTimeout","init","formId","isTagsEnabled"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JavaScript for the add_random_form class.\r\n *\r\n * @module    mod_quiz/add_random_form\r\n * @package   mod_quiz\r\n * @copyright 2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'mod_quiz/random_question_form_preview'\r\n    ],\r\n    function(\r\n        $,\r\n        RandomQuestionFormPreview\r\n    ) {\r\n\r\n    // Wait 2 seconds before reloading the question set just in case\r\n    // the user is still changing the criteria.\r\n    var RELOAD_DELAY = 2000;\r\n    var SELECTORS = {\r\n        PREVIEW_CONTAINER: '[data-region=\"random-question-preview-container\"]',\r\n        CATEGORY_FORM_ELEMENT: '[name=\"category\"]',\r\n        SUBCATEGORY_FORM_ELEMENT: '[name=\"includesubcategories\"]',\r\n        TAG_IDS_FORM_ELEMENT: '[name=\"fromtags[]\"]'\r\n    };\r\n\r\n    /**\r\n     * Get the selected category value from the form.\r\n     *\r\n     * @param {jquery} form The form element.\r\n     * @return {string} The category value.\r\n     */\r\n    var getCategorySelectValue = function(form) {\r\n        return form.find(SELECTORS.CATEGORY_FORM_ELEMENT).val();\r\n    };\r\n\r\n    /**\r\n     * Get the category id from the form.\r\n     *\r\n     * @param {jquery} form The form element.\r\n     * @return {string} The category id.\r\n     */\r\n    var getCategoryId = function(form) {\r\n        // The value string is the category id and category context id joined\r\n        // by a comma.\r\n        var valueString = getCategorySelectValue(form);\r\n        // Split the two ids.\r\n        var values = valueString.split(',');\r\n        // Return just the category id.\r\n        return values[0];\r\n    };\r\n\r\n    /**\r\n     * Check if a top level category is selected in the form.\r\n     *\r\n     * @param {jquery} form The form element.\r\n     * @param {string[]} topCategories List of top category values (matching the select box values)\r\n     * @return {bool}\r\n     */\r\n    var isTopLevelCategorySelected = function(form, topCategories) {\r\n        var selectedValue = getCategorySelectValue(form);\r\n        return (topCategories.indexOf(selectedValue) > -1);\r\n    };\r\n\r\n    /**\r\n     * Check if the form indicates we should include include subcategories in\r\n     * the filter.\r\n     *\r\n     * @param {jquery} form The form element.\r\n     * @param {string[]} topCategories List of top category values (matching the select box values)\r\n     * @return {bool}\r\n     */\r\n    var shouldIncludeSubcategories = function(form, topCategories) {\r\n        if (isTopLevelCategorySelected(form, topCategories)) {\r\n            return true;\r\n        } else {\r\n            return form.find(SELECTORS.SUBCATEGORY_FORM_ELEMENT).is(':checked');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the tag ids for the selected tags in the form.\r\n     *\r\n     * @param {jquery} form The form element.\r\n     * @return {string[]} The tag ids.\r\n     */\r\n    var getTagIds = function(form) {\r\n        var values = form.find(SELECTORS.TAG_IDS_FORM_ELEMENT).val();\r\n        return values.map(function(value) {\r\n            // The tag element value is the tag id and tag name joined\r\n            // by a comma. So we need to split them to get the tag id.\r\n            var parts = value.split(',');\r\n            return parts[0];\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Reload the preview section with a new set of filters.\r\n     *\r\n     * @param {jquery} form The form element.\r\n     * @param {int} contextId The current context id.\r\n     * @param {string[]} topCategories List of top category values (matching the select box values)\r\n     */\r\n    var reloadQuestionPreview = function(form, contextId, topCategories) {\r\n        var previewContainer = form.find(SELECTORS.PREVIEW_CONTAINER);\r\n        RandomQuestionFormPreview.reload(\r\n            previewContainer,\r\n            getCategoryId(form),\r\n            shouldIncludeSubcategories(form, topCategories),\r\n            getTagIds(form),\r\n            contextId\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Is this an element we're interested in listening to changes on.\r\n     *\r\n     * @param {jquery} element The element to check.\r\n     * @return {bool}\r\n     */\r\n    var isInterestingElement = function(element) {\r\n        if (element.closest(SELECTORS.CATEGORY_FORM_ELEMENT).length > 0) {\r\n            return true;\r\n        }\r\n\r\n        if (element.closest(SELECTORS.SUBCATEGORY_FORM_ELEMENT).length > 0) {\r\n            return true;\r\n        }\r\n\r\n        if (element.closest(SELECTORS.TAG_IDS_FORM_ELEMENT).length > 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Listen for changes to any of the interesting elements and reload the form\r\n     * preview with the new filter values if they are changed.\r\n     *\r\n     * The reload is delayed for a small amount of time (see RELOAD_DELAY) in case\r\n     * the user is actively editing the form. This allows us to avoid having to\r\n     * send multiple requests to the server on each change.\r\n     *\r\n     * Instead we can just send a single request when the user appears to have\r\n     * finished editing the form.\r\n     *\r\n     * @param {jquery} form The form element.\r\n     * @param {int} contextId The current context id.\r\n     * @param {string[]} topCategories List of top category values (matching the select box values)\r\n     */\r\n    var addEventListeners = function(form, contextId, topCategories) {\r\n        var reloadTimerId = null;\r\n\r\n        form.on('change', function(e) {\r\n            // Only reload the preview when elements that will change the result\r\n            // are modified.\r\n            if (!isInterestingElement($(e.target))) {\r\n                return;\r\n            }\r\n\r\n            // Show the loading icon to let the user know that the preview\r\n            // will be updated after their actions.\r\n            RandomQuestionFormPreview.showLoadingIcon(form);\r\n\r\n            if (reloadTimerId) {\r\n                // Reset the timer each time the form is modified.\r\n                clearTimeout(reloadTimerId);\r\n            }\r\n\r\n            // Don't immediately reload the question preview section just\r\n            // in case the user is still modifying the form. We don't want to\r\n            // spam reload requests.\r\n            reloadTimerId = setTimeout(function() {\r\n                reloadQuestionPreview(form, contextId, topCategories);\r\n            }, RELOAD_DELAY);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Trigger the first load of the preview section and then listen for modifications\r\n     * to the form to reload the preview with new filter values.\r\n     *\r\n     * @param {jquery} formId The form element id.\r\n     * @param {int} contextId The current context id.\r\n     * @param {string[]} topCategories List of top category values (matching the select box values)\r\n     * @param {bool} isTagsEnabled Whether tags feature is enabled or not.\r\n     */\r\n    var init = function(formId, contextId, topCategories, isTagsEnabled) {\r\n         if (isTagsEnabled == true) {\r\n             var form = $('#' + formId);\r\n             reloadQuestionPreview(form, contextId, topCategories, isTagsEnabled);\r\n             addEventListeners(form, contextId, topCategories, isTagsEnabled);\r\n         }\r\n    };\r\n\r\n    return {\r\n        init: init\r\n    };\r\n});\r\n"],"file":"add_random_form.min.js"}