{"version":3,"sources":["../src/random_question_form_preview.js"],"names":["define","$","Ajax","Str","Notification","Templates","PagedContentFactory","TEMPLATE_NAME","SELECTORS","LOADING_ICON_CONTAINER","QUESTION_COUNT_CONTAINER","QUESTION_LIST_CONTAINER","showLoadingIcon","root","find","removeClass","hideLoadingIcon","addClass","renderQuestionCount","questionCount","get_string","then","string","html","fail","exception","requestQuestions","categoryId","includeSubcategories","tagIds","contextId","limit","offset","call","methodname","args","categoryid","includesubcategories","tagids","contextid","renderQuestionsAsPagedContent","totalQuestionCount","firstPageQuestions","createFromAjax","pagesData","map","pageData","render","questions","response","reload","totalCount","totalcount","length","Deferred","resolve","js","container","replaceNodeContents","always"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JavaScript for the random_question_form_preview of the\r\n * add_random_form class.\r\n *\r\n * @module    mod_quiz/random_question_form_preview\r\n * @package   mod_quiz\r\n * @copyright 2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'core/ajax',\r\n        'core/str',\r\n        'core/notification',\r\n        'core/templates',\r\n        'core/paged_content_factory'\r\n    ],\r\n    function(\r\n        $,\r\n        Ajax,\r\n        Str,\r\n        Notification,\r\n        Templates,\r\n        PagedContentFactory\r\n    ) {\r\n\r\n    var ITEMS_PER_PAGE = 5;\r\n    var TEMPLATE_NAME = 'mod_quiz/random_question_form_preview_question_list';\r\n    var SELECTORS = {\r\n        LOADING_ICON_CONTAINER: '[data-region=\"overlay-icon-container\"]',\r\n        QUESTION_COUNT_CONTAINER: '[data-region=\"question-count-container\"]',\r\n        QUESTION_LIST_CONTAINER: '[data-region=\"question-list-container\"]'\r\n    };\r\n\r\n    /**\r\n     * Show the loading spinner over the preview section.\r\n     *\r\n     * @param  {jquery} root The root element.\r\n     */\r\n    var showLoadingIcon = function(root) {\r\n        root.find(SELECTORS.LOADING_ICON_CONTAINER).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the loading spinner.\r\n     *\r\n     * @param  {jquery} root The root element.\r\n     */\r\n    var hideLoadingIcon = function(root) {\r\n        root.find(SELECTORS.LOADING_ICON_CONTAINER).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Render the section of text to show the question count.\r\n     *\r\n     * @param  {jquery} root The root element.\r\n     * @param  {int} questionCount The number of questions.\r\n     */\r\n    var renderQuestionCount = function(root, questionCount) {\r\n        Str.get_string('questionsmatchingfilter', 'mod_quiz', questionCount)\r\n            .then(function(string) {\r\n                root.find(SELECTORS.QUESTION_COUNT_CONTAINER).html(string);\r\n                return;\r\n            })\r\n            .fail(Notification.exception);\r\n    };\r\n\r\n    /**\r\n     * Send a request to the server for more questions.\r\n     *\r\n     * @param  {int} categoryId A question category id.\r\n     * @param  {bool} includeSubcategories If the results should include subcategory questions\r\n     * @param  {int[]} tagIds The list of tag ids that each question must have.\r\n     * @param  {int} contextId The context where the questions will be added.\r\n     * @param  {int} limit How many questions to retrieve.\r\n     * @param  {int} offset How many questions to skip from the start of the result set.\r\n     * @return {promise} Resolved when the preview section has rendered.\r\n     */\r\n    var requestQuestions = function(\r\n        categoryId,\r\n        includeSubcategories,\r\n        tagIds,\r\n        contextId,\r\n        limit,\r\n        offset\r\n    ) {\r\n        var request = {\r\n            methodname: 'core_question_get_random_question_summaries',\r\n            args: {\r\n                categoryid: categoryId,\r\n                includesubcategories: includeSubcategories,\r\n                tagids: tagIds,\r\n                contextid: contextId,\r\n                limit: limit,\r\n                offset: offset\r\n            }\r\n        };\r\n\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Build a paged content widget for questions with the given criteria. The\r\n     * criteria is used to fetch more questions from the server as the user\r\n     * requests new pages.\r\n     *\r\n     * @param  {int} categoryId A question category id.\r\n     * @param  {bool} includeSubcategories If the results should include subcategory questions\r\n     * @param  {int[]} tagIds The list of tag ids that each question must have.\r\n     * @param  {int} contextId The context where the questions will be added.\r\n     * @param  {int} totalQuestionCount How many questions match the criteria above.\r\n     * @param  {object[]} firstPageQuestions List of questions for the first page.\r\n     * @return {promise} A promise resolved with the HTML and JS for the paged content.\r\n     */\r\n    var renderQuestionsAsPagedContent = function(\r\n        categoryId,\r\n        includeSubcategories,\r\n        tagIds,\r\n        contextId,\r\n        totalQuestionCount,\r\n        firstPageQuestions\r\n    ) {\r\n        // Provide a callback, renderQuestionsPages,\r\n        // to control how the questions on each page are rendered.\r\n        return PagedContentFactory.createFromAjax(\r\n            totalQuestionCount,\r\n            ITEMS_PER_PAGE,\r\n            // Callback function to render the requested pages.\r\n            function(pagesData) {\r\n                return pagesData.map(function(pageData) {\r\n                    var limit = pageData.limit;\r\n                    var offset = pageData.offset;\r\n\r\n                    if (offset == 0) {\r\n                        // The first page is being requested and we've already got\r\n                        // that data so we can just render it immediately.\r\n                        return Templates.render(TEMPLATE_NAME, {questions: firstPageQuestions});\r\n                    } else {\r\n                        // Otherwise we need to ask the server for the data.\r\n                        return requestQuestions(\r\n                            categoryId,\r\n                            includeSubcategories,\r\n                            tagIds,\r\n                            contextId,\r\n                            limit,\r\n                            offset\r\n                        )\r\n                        .then(function(response) {\r\n                            var questions = response.questions;\r\n                            return Templates.render(TEMPLATE_NAME, {questions: questions});\r\n                        })\r\n                        .fail(Notification.exception);\r\n                    }\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Re-render the preview section based on the provided filter criteria.\r\n     *\r\n     * @param  {jquery} root The root element.\r\n     * @param  {int} categoryId A question category id.\r\n     * @param  {bool} includeSubcategories If the results should include subcategory questions\r\n     * @param  {int[]} tagIds The list of tag ids that each question must have.\r\n     * @param  {int} contextId The context where the questions will be added.\r\n     * @return {promise} Resolved when the preview section has rendered.\r\n     */\r\n    var reload = function(root, categoryId, includeSubcategories, tagIds, contextId) {\r\n        // Show the loading spinner to tell the user that something is happening.\r\n        showLoadingIcon(root);\r\n        // Load the first set of questions.\r\n        return requestQuestions(categoryId, includeSubcategories, tagIds, contextId, ITEMS_PER_PAGE, 0)\r\n            .then(function(response) {\r\n                var totalCount = response.totalcount;\r\n                // Show the help message for the user to indicate how many questions\r\n                // match their filter criteria.\r\n                renderQuestionCount(root, totalCount);\r\n                return response;\r\n            })\r\n            .then(function(response) {\r\n                var totalQuestionCount = response.totalcount;\r\n                var questions = response.questions;\r\n\r\n                if (questions.length) {\r\n                    // We received some questions so render them as paged content\r\n                    // with a paging bar.\r\n                    return renderQuestionsAsPagedContent(\r\n                        categoryId,\r\n                        includeSubcategories,\r\n                        tagIds,\r\n                        contextId,\r\n                        totalQuestionCount,\r\n                        questions\r\n                    );\r\n                } else {\r\n                    // If we didn't receive any questions then we can return empty\r\n                    // HTML and JS to clear the preview section.\r\n                    return $.Deferred().resolve('', '');\r\n                }\r\n            })\r\n            .then(function(html, js) {\r\n                // Show the user the question set.\r\n                var container = root.find(SELECTORS.QUESTION_LIST_CONTAINER);\r\n                Templates.replaceNodeContents(container, html, js);\r\n                return;\r\n            })\r\n            .always(function() {\r\n                hideLoadingIcon(root);\r\n            })\r\n            .fail(Notification.exception);\r\n    };\r\n\r\n    return {\r\n        reload: reload,\r\n        showLoadingIcon: showLoadingIcon,\r\n        hideLoadingIcon: hideLoadingIcon\r\n    };\r\n});\r\n"],"file":"random_question_form_preview.min.js"}